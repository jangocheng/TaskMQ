<#@ output extension=".cs" #>
<#@ template debug="false"  hostspecific="true" language="C#" #>

<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ assembly name="$(ProjectDir)..\TaskQueue\bin\Debug\TaskQueue.dll" #>
<#@ assembly name="$(ProjectDir)..\TaskClient\bin\Debug\TaskClient.dll" #>
<#
    // 1. Check for TaskClient, TaskQueue, ServiceStack dependencies contains in bin\debug directory
    // 2. Check parameters below and make sure taskmq daemon with restservice is ready and well configured

    // PARAMETERS
    string MessageType = "EMail";
    string RestApiBaseUri = "http://127.0.0.1:82/";
#>
/*
*	Important ! 
*     this file preprocessed with t4 template - TextTemplatingFileGenerator
*
*   CodeGeneration parameters:
*       MessageType			'<#= MessageType #>'
*       RestApiBaseUri		'<#= RestApiBaseUri #>'
*
*/
namespace <#= System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("NamespaceHint") #>
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    
    public class EMail : TaskQueue.Providers.TaskMessage
    {
        const string MType = "<#= MessageType #>";
        public EMail()
            : base(MType)
        {

        }
        public EMail(TaskQueue.Providers.TaskMessage holder)
            : base(holder.MType)
        {
            this.SetHolder(holder.GetHolder());
        }
        public EMail(Dictionary<string, object> holder)
            : base(MType)
        {
            this.SetHolder(holder);
        }
<# 
    System.IO.Directory.SetCurrentDirectory(this.Host.ResolvePath("bin\\debug"));
    
    TaskQueue.RepresentedModel result = null;
    try
    {
        TaskClient.Clients.HttpRest restService = new TaskClient.Clients.HttpRest(RestApiBaseUri);
        result = restService.GetValidationInfo(MessageType);
    }catch(Exception exc)
    {
        #>
        /*
        <#= exc.Message + " " + exc.StackTrace #>
        */
        <#
    }
#><#
    if(result != null)
    {
for (int i = 0; i < result.schema.val1.Count; i++)
{
    if(result.schema.val2[i].Inherited)
    {
        continue;
    }
#>
        /// <summary>
        /// <#= result.schema.val2[i].Description!=null ? result.schema.val2[i].Description : "" #>	
        /// <#= result.schema.val2[i].Required ?"REQUIRED !":"" #>
        /// </summary>	
        public <#=TaskQueue.RepresentedModel.GetLTypeString(result.schema.val2[i].VType)#> <#= result.schema.val1[i] #> { get; set; }
<#}
}#>
    }
}